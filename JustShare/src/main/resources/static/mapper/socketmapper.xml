<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.js.web.chat.SocketDAO">

<update id="tradestatus" parameterType="Map">

 UPDATE trade
    	SET
        
         tradestatus = 1
         
      
    WHERE bno=#{bno} AND tradestatus=0
  	 


</update>

<insert id="tradecopy" parameterType="Map">
 
    INSERT INTO tradehistory (from_user_id, to_user_id, bno, timestamp) 
    SELECT from_user_id, to_user_id, bno, now()
    FROM trade
    WHERE to_user_id=#{toId} AND from_user_id=#{mid} AND bno=#{bno}
        AND tradestatus=1

  </insert>

<select id="bnochk" parameterType="Map" resultType="Integer">

SELECT count(*) as count
FROM trade
WHERE (to_user_id=#{toId} AND from_user_id=#{mid} AND bno=#{bno})
OR (from_user_id=#{toId} AND to_user_id=#{mid} AND bno=#{bno})

</select>

<select id="toIdbnochk" parameterType="Map" resultType="Integer">

SELECT count(*) as count
FROM trade
WHERE to_user_id=#{toId} AND from_user_id=#{mid} AND bno=#{bno}

</select>

<update id="toup" parameterType="Map">
    UPDATE trade
    SET
      to_user_chk = CASE
            WHEN to_user_id = #{mid} THEN
              CASE
                  WHEN to_user_chk = 0 THEN 1
           		  WHEN to_user_chk = 1 THEN 0
  			 	WHEN to_user_chk = 1 AND from_user_chk = 1 
   				THEN to_user_chk
                    ELSE 0
                END
            ELSE to_user_chk
        END
        
    WHERE 
    (to_user_id = #{mid} AND from_user_id = #{toId} AND bno = #{bno})
</update>

<update id="fromup" parameterType="Map">
    UPDATE trade
    SET
      from_user_chk = CASE
            WHEN to_user_id = #{toId} THEN
              CASE
                  WHEN from_user_chk = 0 THEN 1
           		  WHEN from_user_chk = 1 THEN 0
  			 	WHEN to_user_chk = 1 AND from_user_chk = 1 
   				THEN from_user_chk
                    ELSE 0
                END
            ELSE from_user_chk
        END
        
    WHERE 
    (to_user_id = #{toId} AND from_user_id = #{mid}  AND bno = #{bno})
</update>


<select id="tradechk" parameterType="Map" resultType="Map">

SELECT to_user_chk,from_user_chk
FROM trade
WHERE to_user_id=#{toId} AND from_user_id=#{mid} AND bno=#{bno} AND tradestatus=0
OR to_user_id=#{mid} AND from_user_id=#{toId} AND bno=#{bno} AND tradestatus=0

</select>

<select id="bnoload" parameterType="Map" resultType="Integer">

(SELECT bno
FROM trade
WHERE (to_user_id = #{toId} AND from_user_id = #{mid} AND tradestatus=0)
   OR (to_user_id = #{toId} AND from_user_id = #{mid} AND tradestatus=1)
ORDER BY CASE WHEN tradestatus = 0 THEN 0 ELSE 1 END, tno DESC
LIMIT 1)

UNION

(SELECT bno
FROM trade
WHERE (to_user_id = #{mid} AND from_user_id = #{toId} AND tradestatus=0)
   OR (to_user_id = #{mid} AND from_user_id = #{toId} AND tradestatus=1)
ORDER BY CASE WHEN tradestatus = 0 THEN 0 ELSE 1 END, tno DESC
LIMIT 1);
</select>

<insert id="bnosave" parameterType="Map">
	
	

INSERT INTO trade  (to_user_id,from_user_id,bno,tradestatus,to_user_chk,from_user_chk)
VALUES (#{toId},#{mid},#{bno},0,0,0)
ON DUPLICATE KEY UPDATE 
	 bno = #{bno},
    to_user_chk = 0,
    from_user_chk = 0,
    tradestatus=0 
	
	
	</insert>


	<select id="serchid"  parameterType="Map" resultType="Map">
	
SELECT
    u.from_user_id,
    u.to_user_id,
    u.content,
    (SELECT mimg FROM members WHERE mid= #{toId}) AS toimg,
    (SELECT mimg FROM members WHERE mid = #{mid}) AS myimg,
    u.timestamp,
    (SELECT mid from members WHERE mid=#{toId}) AS toId,
    (SELECT realFile FROM image WHERE bno=#{bno} AND main=1) AS bimg,
    (SELECT btitle FROM board WHERE bno=#{bno}) AS btitle,
	(SELECT bno FROM board WHERE bno=#{bno}) AS bno
    

FROM UserMessages u

WHERE (u.from_user_id = #{mid} AND u.to_user_id = #{toId} 
   OR u.from_user_id = #{toId} AND u.to_user_id = #{mid}) 
   AND FIND_IN_SET(#{mid}, u.exceptid)=0 

   ORDER BY u.timestamp ASC

	</select>
	
	<insert id="msginsert" parameterType="Map">


INSERT INTO UserMessages (to_user_id, content, from_user_id, timestamp, read_status,bno,tradestatus)
VALUES (#{toId}, #{text}, #{mid}, NOW(), 1,#{bno},0)


	</insert>
	
	<select id="isFirstConversation" parameterType="Map" resultType="Integer">
	
	select
	  	
    		count(*) as count
    FROM UserMessages u	
 	WHERE (u.from_user_id = #{mid} AND u.to_user_id = #{toId}) 
  		OR (u.from_user_id = #{toId} AND u.to_user_id = #{mid}) 
  		AND u.exceptid !=#{mid}
    		
	</select>
	
	<insert id="Firstmsg" parameterType="Map">
	
	INSERT INTO UserMessages (to_user_id,content,from_user_id,timestamp,read_status,deletemsg,bno,tradestatus)
	VALUE (#{toId},#{message},#{mid},NOW(),#{read_status},#{deletemsg},#{bno},0)
	
	</insert>

	<update id="Firstupdate" parameterType="Map">
	
	 UPDATE UserMessages
    	SET
        
         exceptid = #{exceptid}
         
      
    WHERE from_user_id = #{mid} AND to_user_id = #{toId} AND deletemsg=2
  	 
 
	
	
	</update>

<select id="imgserch"  parameterType="Map" resultType="String">
	
SELECT
 
    mimg 
  
FROM members 

WHERE mid = #{mid}

	</select>
	
	<select id="roomload" parameterType="Map" resultType="Map">
	
	SELECT
    m1.message_id AS latest_message_id,
    m1.timestamp AS latest_timestamp,
    m1.to_user_id,
    m1.from_user_id,
    m1.content,
    (
        SELECT COUNT(*)
        FROM UserMessages 
        WHERE to_user_id = #{mid} AND from_user_id = m1.from_user_id AND read_status = 1 
    ) AS read_count,
    m1.bno
  
FROM UserMessages m1
WHERE m1.message_id IN (
    SELECT MAX(m2.message_id)
    FROM UserMessages m2
    WHERE (m2.from_user_id = #{mid} OR m2.to_user_id = #{mid}) 
    AND FIND_IN_SET(#{mid}, m2.exceptid)=0 AND m2.deletemsg != 2
    GROUP BY 
        CASE 
            WHEN m2.from_user_id = #{mid} THEN m2.to_user_id
            WHEN m2.to_user_id = #{mid} THEN m2.from_user_id
        END
) 
ORDER BY latest_timestamp DESC;
	</select>
	
	<update id="readupdate" parameterType="Map">

UPDATE UserMessages AS u
INNER JOIN members AS m ON u.to_user_id = m.mid
SET u.read_status = 0,
    m.mchatcount = m.mchatcount - (
        SELECT sub_count FROM (
            SELECT COUNT(*) AS sub_count FROM UserMessages
            WHERE to_user_id = #{mid} AND from_user_id = #{toId} AND read_status = 1
        ) sub_query
    )
WHERE u.to_user_id = #{mid} AND u.from_user_id = #{toId}
	
	</update>
	
	<update id="chatcount" parameterType="String">
	
	 UPDATE members
    	SET
        
          mchatcount = mchatcount +1
         
      
    WHERE mid= #{toId} 
 
	
	
	</update>
	
	<select id="msgcount" parameterType="String" resultType="Integer">
	
	SELECT m.mchatcount FROM members m
	INNER JOIN UserMessages u on u.to_user_id=m.mid
	WHERE m.mid=#{mid} AND u.to_user_id= #{mid}
	LIMIT 1
	
	
	</select>
	
	
	<update id="exceptid" parameterType="Map">
	  <![CDATA[
	 UPDATE UserMessages
    	SET
        
     
      	  exceptid = 
      	  
        CASE
        WHEN exceptid ='제외' THEN '제외'
        WHEN exceptid='0' THEN #{exceptid}
        WHEN FIND_IN_SET(#{exceptid}, exceptid) = 0 
        THEN CONCAT(exceptid, CONCAT(',', #{exceptid}))
        ELSE exceptid
      END
    WHERE (to_user_id= #{toId} AND from_user_id= #{mid}) 
    OR    (from_user_id= #{toId} AND to_user_id= #{mid}) 
   ]]>
	
	
	</update>
	
	<select id="blockchk" parameterType="Map" resultType="Integer">
	
	SELECT COUNT(*) AS count  FROM chatblock
	
	WHERE blocker_id=#{toId} AND blocked_id=#{mid}
	
	
	</select>
	
	<insert id="block" parameterType="Map">
	
	
	
    INSERT INTO chatblock (blocker_id, blocked_id, timestamp)
SELECT #{mid}, #{toId}, NOW()
FROM dual
WHERE NOT EXISTS (
    SELECT 1
    FROM chatblock
    WHERE blocker_id = #{mid} AND blocked_id = #{toId}
)
	
	</insert>
	
	
	<delete id="unblock" parameterType="Map">
	
		DELETE FROM chatblock
		WHERE blocker_id = #{mid} AND blocked_id = #{toId}
	
	
	</delete>
	
	
	<select id="blocklist" parameterType="String" resultType="Map">
	SELECT blocker_id, GROUP_CONCAT(blocked_id) as blocked_ids 
	FROM chatblock 
	GROUP BY blocker_id
	
	</select>
	


<select id="firstmsgchk" parameterType="Map" resultType="Integer">
 
 SELECT COUNT(*) as COUNT
  FROM UserMessages
  WHERE 
  (
    (from_user_id=#{mid} AND to_user_id=#{sender} AND exceptid ='0')
    OR
    (from_user_id=#{sender} AND to_user_id=#{mid} AND exceptid ='0')
  )

	</select>

	<select id="roomserch" parameterType="Map" resultType="Map">

SELECT
    m1.message_id AS latest_message_id,
    m1.timestamp AS latest_timestamp,
    m1.to_user_id,
    m1.from_user_id,
    m1.content,
    (
        SELECT COUNT(*)
        FROM UserMessages 
        WHERE to_user_id = m1.from_user_id AND from_user_id = #{mid} AND read_status = 1 
    ) AS read_count
FROM UserMessages m1
WHERE m1.message_id IN (
    SELECT MAX(m2.message_id)
    FROM UserMessages m2
    WHERE 
        (
            (m2.from_user_id = #{mid} AND m1.to_user_id LIKE CONCAT('%', REPLACE(#{input}, ' ', ''), '%'))
            OR
            (m2.to_user_id = #{mid} AND m1.from_user_id LIKE CONCAT('%', REPLACE(#{input}, ' ', ''), '%'))
        )
        AND FIND_IN_SET(#{mid}, m2.exceptid) = 0
        AND m2.deletemsg != 2
    GROUP BY 
        CASE 
            WHEN m2.from_user_id = #{mid} THEN m2.to_user_id
            WHEN m2.to_user_id = #{mid} THEN m2.from_user_id
        END
) 
ORDER BY latest_timestamp DESC;
	</select>
	

	</mapper>